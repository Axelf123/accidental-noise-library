$#include "anl_noise.h"
$#include "anl_rgba.h"

namespace anl
{
	enum EColorOperations
    {
        COLORMULTIPLY,
        COLORADD,
        SCREEN,
        OVERLAY,
        SOFTLIGHT,
        HARDLIGHT,
        DODGE,
        BURN,
        LINEARDODGE,
        LINEARBURN
    };
	
	enum CompositeChannelsMode
    {
        RGB,
        HSV
    };
	
	class CRGBAModuleBase
    {
        public:
        void setSeed(int){};

        virtual anl::SRGBA get(double x, double y)=0;
        virtual anl::SRGBA get(double x, double y, double z)=0;
        virtual anl::SRGBA get(double x, double y, double z, double w)=0;
        virtual anl::SRGBA get(double x, double y, double z, double w, double u, double v)=0;
    };
	
	/*class CRGBABlend : public CRGBAModuleBase
    {
        public:
        CRGBABlend();
        ~CRGBABlend();

        void setLowSource(CRGBAModuleBase *m);
        void setHighSource(CRGBAModuleBase *m);
        void setLowSource(float r, float g, float b, float a);
        void setHighSource(float r, float g, float b, float a);
        void setControlSource(CImplicitModuleBase *m);
        void setControlSource(double v);
	};
	
	class CRGBABlendOps : public CRGBAModuleBase
    {
        public:
        CRGBABlendOps();
        CRGBABlendOps(int src1mode, int src2mode);
        ~CRGBABlendOps();

        void setSrc1Mode(int mode);
        void setSrc2Mode(int mode);
        void setSource1(CRGBAModuleBase *m);
        void setSource2(CRGBAModuleBase *m);
        void setSource1(float r, float g, float b, float a);
        void setSource2(float r, float g, float b, float a);
	};
	
	class CRGBAColorOps : public CRGBAModuleBase
    {
        public:
        CRGBAColorOps();
        CRGBAColorOps(int op);
        ~CRGBAColorOps();

        void setOperation(int op);

        void setSource1(float r, float g, float b, float a);
        void setSource1(CRGBAModuleBase *m);
        void setSource2(float r, float g, float b, float a);
        void setSource2(CRGBAModuleBase *m);
	};
	
	class CRGBACompositeChannels : public CRGBAModuleBase
    {
        public:
        CRGBACompositeChannels();
        CRGBACompositeChannels(int mode);
        ~CRGBACompositeChannels();

        void setMode(int mode){m_mode=mode;}

        void setRedSource(CImplicitModuleBase *m);
        void setGreenSource(CImplicitModuleBase *m);
        void setBlueSource(CImplicitModuleBase *m);
        void setHueSource(CImplicitModuleBase *m);
        void setSatSource(CImplicitModuleBase *m);
        void setValSource(CImplicitModuleBase *m);
        void setAlphaSource(CImplicitModuleBase *m);

        void setRedSource(double r);
        void setGreenSource(double g);
        void setBlueSource(double b);
        void setAlphaSource(double a);
        void setHueSource(double h);
        void setSatSource(double s);
        void setValSource(double v);
	};
	
	class CRGBACurve : public CRGBAModuleBase
    {
        public:
        CRGBACurve();
        ~CRGBACurve();

        void pushPoint(double t, float r, float g, float b, float a);
        void clearCurve();
        void setSource(double t);
        void setSource(CImplicitModuleBase *m);
        void setInterpType(int type);
	};
	
	class CRGBAConstant : public CRGBAModuleBase
    {
        public:
        CRGBAConstant();
        CRGBAConstant(SRGBA &r);
        CRGBAConstant(float r, float g, float b, float a);
        ~CRGBAConstant();

        void set(float r, float g, float b, float a);
        void set(SRGBA &r);
	};
	
	class CRGBAHSVToRGBA :public CRGBAModuleBase
    {
        public:
        CRGBAHSVToRGBA();

        void setSource(CRGBAModuleBase *m);
        void setSource(float r, float g, float b, float a);
	};
	
	class CRGBAImplicitGrayscale : public CRGBAModuleBase
    {
        public:
        CRGBAImplicitGrayscale();
        ~CRGBAImplicitGrayscale();

        void setSource(CImplicitModuleBase *m);
	};
	
	class CRGBANormalize : public CRGBAModuleBase
	{
		public:
		CRGBANormalize();
		~CRGBANormalize();
		void setSource(CRGBAModuleBase *m);
		void setSource(float r, float g, float b, float a);
	};
	
	class CRGBARGBAToHSV :public CRGBAModuleBase
    {
        public:
        CRGBARGBAToHSV();

        void setSource(CRGBAModuleBase *m);
        void setSource(float r, float g, float b, float a);
	};
	
	class CRGBARotateColor : public CRGBAModuleBase
    {
        public:
        CRGBARotateColor();
        void setAxis(double ax, double ay, double az);
        void setAxis(CImplicitModuleBase *ax, CImplicitModuleBase *ay, CImplicitModuleBase *az);
        void setAxisX(double ax);
        void setAxisY(double ay);
        void setAxisZ(double az);
        void setAxisX(CImplicitModuleBase *ax);
        void setAxisY(CImplicitModuleBase *ay);
        void setAxisZ(CImplicitModuleBase *az);

        void setNormalizeAxis(bool n){m_normalizeaxis=n;}

        void setAngle(double a);
        void setAngle(CImplicitModuleBase *a);

        void setSource(CRGBAModuleBase *m);
        void setSource(float r, float g, float b, float a);
	};
	
	class CRGBASelect : public CRGBAModuleBase
    {
        public:
        CRGBASelect();
        CRGBASelect(double thresh, double fall);

        void setLowSource(CRGBAModuleBase *m);
        void setHighSource(CRGBAModuleBase *m);
        void setLowSource(float r, float g, float b, float a);
        void setHighSource(float r, float g, float b, float a);
        void setControlSource(CImplicitModuleBase *m);
        void setThreshold(CImplicitModuleBase *m);
        void setFalloff(CImplicitModuleBase *m);
        void setControlSource(double v);
        void setThreshold(double v);
        void setFalloff(double v);
	};*/
};