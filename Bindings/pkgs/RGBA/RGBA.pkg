$#include "anl_noise.h"
$#include "anl_rgba.h"

namespace anl
{
	enum EColorOperations
    {
        COLORMULTIPLY,
        COLORADD,
        SCREEN,
        OVERLAY,
        SOFTLIGHT,
        HARDLIGHT,
        DODGE,
        BURN,
        LINEARDODGE,
        LINEARBURN
    };
	
	enum CompositeChannelsMode
    {
        RGB,
        HSV
    };
	
	enum EBlendOps
    {
        SRC1_ALPHA,
        SRC2_ALPHA,
        ONE_MINUS_SRC1_ALPHA,
        ONE_MINUS_SRC2_ALPHA,
        ONE,
        ZERO
    };
	
	class CRGBAModuleBase
    {
        public:
        void setSeed(int){};

        virtual anl::SRGBA get(double x, double y)=0;
        virtual anl::SRGBA get(double x, double y, double z)=0;
        virtual anl::SRGBA get(double x, double y, double z, double w)=0;
        virtual anl::SRGBA get(double x, double y, double z, double w, double u, double v)=0;
    };
	
	class CRGBABlend : public CRGBAModuleBase
    {
        public:
        CRGBABlend();
        CRGBABlend(double control, anl::SRGBA low, anl::SRGBA high);
        CRGBABlend(double control, anl::SRGBA low, CRGBAModuleBase * high);
        CRGBABlend(double control, CRGBAModuleBase * low, anl::SRGBA high);
        CRGBABlend(double control, CRGBAModuleBase * low, CRGBAModuleBase * high);
        CRGBABlend(anl::CImplicitModuleBase * control, anl::SRGBA low, anl::SRGBA high);
        CRGBABlend(anl::CImplicitModuleBase * control, anl::SRGBA low, CRGBAModuleBase * high);
        CRGBABlend(anl::CImplicitModuleBase * control, CRGBAModuleBase * low, anl::SRGBA high);
        CRGBABlend(anl::CImplicitModuleBase * control, CRGBAModuleBase * low, CRGBAModuleBase * high);

        ~CRGBABlend();

        void setLowSource(CRGBAModuleBase * m);
        void setHighSource(CRGBAModuleBase * m);
        void setLowSource(anl::SRGBA c);
        void setHighSource(anl::SRGBA c);
        void setControlSource(anl::CImplicitModuleBase * m);
        void setControlSource(double v);
	};
	
	class CRGBABlendOps : public CRGBAModuleBase
    {
        public:
        CRGBABlendOps();
        CRGBABlendOps(anl::SRGBA s1, anl::SRGBA s2, int src1mode, int src2mode);
        CRGBABlendOps(anl::SRGBA s1, CRGBAModuleBase * s2, int src1mode, int src2mode);
        CRGBABlendOps(CRGBAModuleBase * s1, anl::SRGBA s2, int src1mode, int src2mode);
        CRGBABlendOps(CRGBAModuleBase * s1, CRGBAModuleBase * s2, int src1mode, int src2mode);

        ~CRGBABlendOps();

        void setSrc1Mode(int mode);
        void setSrc2Mode(int mode);
        void setSource1(CRGBAModuleBase * m);
        void setSource2(CRGBAModuleBase * m);
        void setSource1(anl::SRGBA c);
        void setSource2(anl::SRGBA c);
	};
	
	class CRGBAColorOps : public CRGBAModuleBase
    {
        public:
        CRGBAColorOps();
        CRGBAColorOps(anl::SRGBA s1, anl::SRGBA s2, int op);
        CRGBAColorOps(anl::SRGBA s1, CRGBAModuleBase * s2, int op);
        CRGBAColorOps(CRGBAModuleBase * s1, anl::SRGBA s2, int op);
        CRGBAColorOps(CRGBAModuleBase * s1, CRGBAModuleBase * s2, int op);
        ~CRGBAColorOps();

        void setOperation(int op);

        void setSource1(anl::SRGBA c);
        void setSource1(CRGBAModuleBase * m);
        void setSource2(anl::SRGBA c);
        void setSource2(CRGBAModuleBase * m);
	};
	
	class CRGBACompositeChannels : public CRGBAModuleBase
    {
        public:
        CRGBACompositeChannels();
        CRGBACompositeChannels(double r, double g, double b, double a, int mode);
        CRGBACompositeChannels(double r, double g, double b, anl::CImplicitModuleBase * a, int mode);
        CRGBACompositeChannels(double r, double g, anl::CImplicitModuleBase * b, double a, int mode);
        CRGBACompositeChannels(double r, double g, anl::CImplicitModuleBase * b, anl::CImplicitModuleBase * a, int mode);
        CRGBACompositeChannels(double r, anl::CImplicitModuleBase * g, double b, double a, int mode);
        CRGBACompositeChannels(double r, anl::CImplicitModuleBase * g, double b, anl::CImplicitModuleBase * a, int mode);
        CRGBACompositeChannels(double r, anl::CImplicitModuleBase * g, anl::CImplicitModuleBase * b, double a, int mode);
        CRGBACompositeChannels(double r, anl::CImplicitModuleBase * g, anl::CImplicitModuleBase * b, anl::CImplicitModuleBase * a, int mode);
        CRGBACompositeChannels(anl::CImplicitModuleBase * r, double g, double b, double a, int mode);
        CRGBACompositeChannels(anl::CImplicitModuleBase * r, double g, double b, anl::CImplicitModuleBase * a, int mode);
        CRGBACompositeChannels(anl::CImplicitModuleBase * r, double g, anl::CImplicitModuleBase * b, double a, int mode);
        CRGBACompositeChannels(anl::CImplicitModuleBase * r, double g, anl::CImplicitModuleBase * b, anl::CImplicitModuleBase * a, int mode);
        CRGBACompositeChannels(anl::CImplicitModuleBase * r, anl::CImplicitModuleBase * g, double b, double a, int mode);
        CRGBACompositeChannels(anl::CImplicitModuleBase * r, anl::CImplicitModuleBase * g, double b, anl::CImplicitModuleBase * a, int mode);
        CRGBACompositeChannels(anl::CImplicitModuleBase * r, anl::CImplicitModuleBase * g, anl::CImplicitModuleBase * b, double a, int mode);
        CRGBACompositeChannels(anl::CImplicitModuleBase * r, anl::CImplicitModuleBase * g, anl::CImplicitModuleBase * b, anl::CImplicitModuleBase * a, int mode);

        ~CRGBACompositeChannels();

        void setMode(int mode){m_mode=mode;}

        void setRedSource(anl::CImplicitModuleBase * m);
        void setGreenSource(anl::CImplicitModuleBase * m);
        void setBlueSource(anl::CImplicitModuleBase * m);
        void setHueSource(anl::CImplicitModuleBase * m);
        void setSatSource(anl::CImplicitModuleBase * m);
        void setValSource(anl::CImplicitModuleBase * m);
        void setAlphaSource(anl::CImplicitModuleBase * m);

        void setRedSource(double r);
        void setGreenSource(double g);
        void setBlueSource(double b);
        void setAlphaSource(double a);
        void setHueSource(double h);
        void setSatSource(double s);
        void setValSource(double v);
	};
	
	class CRGBAConstant : public CRGBAModuleBase
    {
        public:
        CRGBAConstant();
        CRGBAConstant(anl::SRGBA &r);
        CRGBAConstant(float r, float g, float b, float a);
        ~CRGBAConstant();

        void set(float r, float g, float b, float a);
        void set(anl::SRGBA &r);
	};
	
	class CRGBACurve : public CRGBAModuleBase
    {
        public:
        CRGBACurve();
        ~CRGBACurve();

        void pushPoint(double t, float r, float g, float b, float a);
        void clearCurve();
        void setSource(double t);
        void setSource(anl::CImplicitModuleBase * m);
        void setInterpType(int type);
	};
	
	class CRGBAHSVToRGBA :public CRGBAModuleBase
    {
        public:
        CRGBAHSVToRGBA();
        CRGBAHSVToRGBA(anl::SRGBA s);
        CRGBAHSVToRGBA(CRGBAModuleBase * s);

        void setSource(CRGBAModuleBase * m);
        void setSource(anl::SRGBA c);
	};
	
	class CRGBAImplicitGrayscale : public CRGBAModuleBase
    {
        public:
        CRGBAImplicitGrayscale();
        CRGBAImplicitGrayscale(double s);
        CRGBAImplicitGrayscale(anl::CImplicitModuleBase * s);
        ~CRGBAImplicitGrayscale();

        void setSource(anl::CImplicitModuleBase * m);
        void setSource(double s);
	};
	
	class CRGBANormalize : public CRGBAModuleBase
    {
        public:
        CRGBANormalize();
        CRGBANormalize(anl::SRGBA s);
        CRGBANormalize(CRGBAModuleBase * s);
        ~CRGBANormalize();

        void setSource(CRGBAModuleBase * m);
        void setSource(anl::SRGBA c);
	};
	
	class CRGBARGBAToHSV :public CRGBAModuleBase
    {
        public:
        CRGBARGBAToHSV();
        CRGBARGBAToHSV(anl::SRGBA s);
        CRGBARGBAToHSV(CRGBAModuleBase * s);

        ~CRGBARGBAToHSV(){}

        void setSource(CRGBAModuleBase * m);
        void setSource(anl::SRGBA c);
	};
	
	class CRGBARotateColor : public CRGBAModuleBase
    {
        public:
        CRGBARotateColor();
        CRGBARotateColor(anl::SRGBA src, double ax, double ay, double az, double angle);
        CRGBARotateColor(anl::SRGBA src, double ax, double ay, double az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(anl::SRGBA src, double ax, double ay, anl::CImplicitModuleBase * az, double angle);
        CRGBARotateColor(anl::SRGBA src, double ax, double ay, anl::CImplicitModuleBase * az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(anl::SRGBA src, double ax, anl::CImplicitModuleBase * ay, double az, double angle);
        CRGBARotateColor(anl::SRGBA src, double ax, anl::CImplicitModuleBase * ay, double az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(anl::SRGBA src, double ax, anl::CImplicitModuleBase * ay, anl::CImplicitModuleBase * az, double angle);
        CRGBARotateColor(anl::SRGBA src, double ax, anl::CImplicitModuleBase * ay, anl::CImplicitModuleBase * az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(anl::SRGBA src, anl::CImplicitModuleBase * ax, double ay, double az, double angle);
        CRGBARotateColor(anl::SRGBA src, anl::CImplicitModuleBase * ax, double ay, double az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(anl::SRGBA src, anl::CImplicitModuleBase * ax, double ay, anl::CImplicitModuleBase * az, double angle);
        CRGBARotateColor(anl::SRGBA src, anl::CImplicitModuleBase * ax, double ay, anl::CImplicitModuleBase * az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(anl::SRGBA src, anl::CImplicitModuleBase * ax, anl::CImplicitModuleBase * ay, double az, double angle);
        CRGBARotateColor(anl::SRGBA src, anl::CImplicitModuleBase * ax, anl::CImplicitModuleBase * ay, double az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(anl::SRGBA src, anl::CImplicitModuleBase * ax, anl::CImplicitModuleBase * ay, anl::CImplicitModuleBase * az, double angle);
        CRGBARotateColor(anl::SRGBA src, anl::CImplicitModuleBase * ax, anl::CImplicitModuleBase * ay, anl::CImplicitModuleBase * az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(CRGBAModuleBase * src, double ax, double ay, double az, double angle);
        CRGBARotateColor(CRGBAModuleBase * src, double ax, double ay, double az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(CRGBAModuleBase * src, double ax, double ay, anl::CImplicitModuleBase * az, double angle);
        CRGBARotateColor(CRGBAModuleBase * src, double ax, double ay, anl::CImplicitModuleBase * az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(CRGBAModuleBase * src, double ax, anl::CImplicitModuleBase * ay, double az, double angle);
        CRGBARotateColor(CRGBAModuleBase * src, double ax, anl::CImplicitModuleBase * ay, double az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(CRGBAModuleBase * src, double ax, anl::CImplicitModuleBase * ay, anl::CImplicitModuleBase * az, double angle);
        CRGBARotateColor(CRGBAModuleBase * src, double ax, anl::CImplicitModuleBase * ay, anl::CImplicitModuleBase * az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(CRGBAModuleBase * src, anl::CImplicitModuleBase * ax, double ay, double az, double angle);
        CRGBARotateColor(CRGBAModuleBase * src, anl::CImplicitModuleBase * ax, double ay, double az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(CRGBAModuleBase * src, anl::CImplicitModuleBase * ax, double ay, anl::CImplicitModuleBase * az, double angle);
        CRGBARotateColor(CRGBAModuleBase * src, anl::CImplicitModuleBase * ax, double ay, anl::CImplicitModuleBase * az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(CRGBAModuleBase * src, anl::CImplicitModuleBase * ax, anl::CImplicitModuleBase * ay, double az, double angle);
        CRGBARotateColor(CRGBAModuleBase * src, anl::CImplicitModuleBase * ax, anl::CImplicitModuleBase * ay, double az, anl::CImplicitModuleBase * angle);
        CRGBARotateColor(CRGBAModuleBase * src, anl::CImplicitModuleBase * ax, anl::CImplicitModuleBase * ay, anl::CImplicitModuleBase * az, double angle);
        CRGBARotateColor(CRGBAModuleBase * src, anl::CImplicitModuleBase * ax, anl::CImplicitModuleBase * ay, anl::CImplicitModuleBase * az, anl::CImplicitModuleBase * angle);


        void setAxis(double ax, double ay, double az);
        void setAxis(anl::CImplicitModuleBase * ax, anl::CImplicitModuleBase * ay, anl::CImplicitModuleBase * az);
        void setAxisX(double ax);
        void setAxisY(double ay);
        void setAxisZ(double az);
        void setAxisX(anl::CImplicitModuleBase * ax);
        void setAxisY(anl::CImplicitModuleBase * ay);
        void setAxisZ(anl::CImplicitModuleBase * az);

        void setNormalizeAxis(bool n){m_normalizeaxis=n;}

        void setAngle(double a);
        void setAngle(anl::CImplicitModuleBase * a);

        void setSource(CRGBAModuleBase * m);
        void setSource(anl::SRGBA c);
	};
	
	class CRGBASelect : public CRGBAModuleBase
    {
        public:
        CRGBASelect();
        CRGBASelect(anl::SRGBA low, anl::SRGBA high, double control, double threshold, double falloff);
        CRGBASelect(anl::SRGBA low, anl::SRGBA high, double control, double threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(anl::SRGBA low, anl::SRGBA high, double control, anl::CImplicitModuleBase * threshold, double falloff);
        CRGBASelect(anl::SRGBA low, anl::SRGBA high, double control, anl::CImplicitModuleBase * threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(anl::SRGBA low, anl::SRGBA high, anl::CImplicitModuleBase * control, double threshold, double falloff);
        CRGBASelect(anl::SRGBA low, anl::SRGBA high, anl::CImplicitModuleBase * control, double threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(anl::SRGBA low, anl::SRGBA high, anl::CImplicitModuleBase * control, anl::CImplicitModuleBase * threshold, double falloff);
        CRGBASelect(anl::SRGBA low, anl::SRGBA high, anl::CImplicitModuleBase * control, anl::CImplicitModuleBase * threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(anl::SRGBA low, CRGBAModuleBase * high, double control, double threshold, double falloff);
        CRGBASelect(anl::SRGBA low, CRGBAModuleBase * high, double control, double threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(anl::SRGBA low, CRGBAModuleBase * high, double control, anl::CImplicitModuleBase * threshold, double falloff);
        CRGBASelect(anl::SRGBA low, CRGBAModuleBase * high, double control, anl::CImplicitModuleBase * threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(anl::SRGBA low, CRGBAModuleBase * high, anl::CImplicitModuleBase * control, double threshold, double falloff);
        CRGBASelect(anl::SRGBA low, CRGBAModuleBase * high, anl::CImplicitModuleBase * control, double threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(anl::SRGBA low, CRGBAModuleBase * high, anl::CImplicitModuleBase * control, anl::CImplicitModuleBase * threshold, double falloff);
        CRGBASelect(anl::SRGBA low, CRGBAModuleBase * high, anl::CImplicitModuleBase * control, anl::CImplicitModuleBase * threshold, anl::CImplicitModuleBase * falloff);

        CRGBASelect(CRGBAModuleBase * low, anl::SRGBA high, double control, double threshold, double falloff);
        CRGBASelect(CRGBAModuleBase * low, anl::SRGBA high, double control, double threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(CRGBAModuleBase * low, anl::SRGBA high, double control, anl::CImplicitModuleBase * threshold, double falloff);
        CRGBASelect(CRGBAModuleBase * low, anl::SRGBA high, double control, anl::CImplicitModuleBase * threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(CRGBAModuleBase * low, anl::SRGBA high, anl::CImplicitModuleBase * control, double threshold, double falloff);
        CRGBASelect(CRGBAModuleBase * low, anl::SRGBA high, anl::CImplicitModuleBase * control, double threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(CRGBAModuleBase * low, anl::SRGBA high, anl::CImplicitModuleBase * control, anl::CImplicitModuleBase * threshold, double falloff);
        CRGBASelect(CRGBAModuleBase * low, anl::SRGBA high, anl::CImplicitModuleBase * control, anl::CImplicitModuleBase * threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(CRGBAModuleBase * low, CRGBAModuleBase * high, double control, double threshold, double falloff);
        CRGBASelect(CRGBAModuleBase * low, CRGBAModuleBase * high, double control, double threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(CRGBAModuleBase * low, CRGBAModuleBase * high, double control, anl::CImplicitModuleBase * threshold, double falloff);
        CRGBASelect(CRGBAModuleBase * low, CRGBAModuleBase * high, double control, anl::CImplicitModuleBase * threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(CRGBAModuleBase * low, CRGBAModuleBase * high, anl::CImplicitModuleBase * control, double threshold, double falloff);
        CRGBASelect(CRGBAModuleBase * low, CRGBAModuleBase * high, anl::CImplicitModuleBase * control, double threshold, anl::CImplicitModuleBase * falloff);
        CRGBASelect(CRGBAModuleBase * low, CRGBAModuleBase * high, anl::CImplicitModuleBase * control, anl::CImplicitModuleBase * threshold, double falloff);
        CRGBASelect(CRGBAModuleBase * low, CRGBAModuleBase * high, anl::CImplicitModuleBase * control, anl::CImplicitModuleBase * threshold, anl::CImplicitModuleBase * falloff);

        void setLowSource(CRGBAModuleBase * m);
        void setHighSource(CRGBAModuleBase * m);
        void setLowSource(anl::SRGBA c);
        void setHighSource(anl::SRGBA c);
        void setControlSource(anl::CImplicitModuleBase * m);
        void setThreshold(anl::CImplicitModuleBase * m);
        void setFalloff(anl::CImplicitModuleBase * m);
        void setControlSource(double v);
        void setThreshold(double v);
        void setFalloff(double v);
	};
};