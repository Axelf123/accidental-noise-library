// Volume.pkg

$#include "volumeadapter.h"
$#include "marchvolume.h"
$#include "../types.h"
$#include "anlmesh.h"

namespace anl
{
	class CVolumeAdapter
	{
		public:
		CVolumeAdapter();
		CVolumeAdapter(anl::CImplicitModuleBase *src, int seamlessmode=anl::SEAMLESS_NONE, anl::SMappingRanges ranges=anl::SMappingRanges(0,1,0,1,0,1));
		~CVolumeAdapter();
		
		void setSeamlessMode(int mode);
		void setMappingRanges(anl::SMappingRanges ranges);
		void setSource(anl::CImplicitModuleBase *src);
		
		void get(anl::CArray3Dd &a);
	};
	
	struct SVertex
	{
		anl::CVec3f v;
		anl::CVec3f n;
		anl::CVec2f tc;
			
		SVertex();
		SVertex(const SVertex &rhs);
		SVertex(anl::CVec3f V, anl::CVec3f N, anl::CVec2f TC);
		SVertex(float x, float y, float z, float nx, float ny, float nz, float u, float v);
		~SVertex();
	};
	
	class CMesh
	{
	public:
		CMesh();
		~CMesh();
		
		unsigned int getVertexCount();
		unsigned int getIndexCount();
		SVertex getVertex(unsigned int which);
		unsigned int getIndex(unsigned int which);
		void setVertex(unsigned int which, SVertex &vertex);
		void setIndex(unsigned int which, unsigned int index);
		
		void pushVertex(SVertex &vertex);
		void pushIndex(unsigned int index);
		
		void saveOBJ(std::string &name, bool savetex, bool savenormal);
	};
	
	void marchDensityFieldCubeOBJ(anl::CArray3Dd &df, float iso, std::string name);
	void marchDensityFieldSmoothOBJ(anl::CArray3Dd &df, float iso, std::string name);
	void marchDensityFieldCube(anl::CArray3Dd &df, float iso, CMesh &mesh);
	void marchDensityFieldSmooth(anl::CArray3Dd &df, float iso, CMesh &mesh);
};
