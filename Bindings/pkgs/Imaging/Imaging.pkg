$#include "anl_noise.h"
$#include "anl_rgba.h"
$#include "anl_imaging.h"
$#include "rasterization.h"
$#include "../types.h"

namespace anl
{
	enum EMappingModes
    {
        SEAMLESS_NONE,
        SEAMLESS_X,
        SEAMLESS_Y,
        SEAMLESS_Z,
        SEAMLESS_XY,
        SEAMLESS_XZ,
        SEAMLESS_YZ,
        SEAMLESS_XYZ
    };

	struct SMappingRanges
    {
        double mapx0,mapy0,mapz0, mapx1,mapy1,mapz1;
        double loopx0,loopy0,loopz0, loopx1,loopy1,loopz1;

        SMappingRanges();
		SMappingRanges(SMappingRanges &rhs);
        SMappingRanges(const anl::SMappingRanges &rhs);
        SMappingRanges(double x0, double x1, double y0, double y1, double z0=0.0, double z1=1.0);
		~SMappingRanges();
    };

	void map2D(int seamlessmode, anl::CArray2Dd &a, anl::CImplicitModuleBase &m, SMappingRanges &ranges, double z);
    void map2DNoZ(int seamlessmode, anl::CArray2Dd &a, anl::CImplicitModuleBase &m, SMappingRanges &ranges);
    void map3D(int seamlessmode, anl::CArray3Dd &a, anl::CImplicitModuleBase &m, SMappingRanges &ranges);

    void mapRGBA2D(int seamlessmode, anl::CArray2Drgba &a, anl::CRGBAModuleBase &m, SMappingRanges &ranges, double z);
    void mapRGBA2DNoZ(int seamlessmode, anl::CArray2Drgba &a, anl::CRGBAModuleBase &m, SMappingRanges &ranges);
    void mapRGBA3D(int seamlessmode, anl::CArray3Drgba &a, anl::CRGBAModuleBase &m, SMappingRanges &ranges);

	void saveDoubleArray(char *filename, anl::CArray2Dd *array);
    void saveRGBAArray(char *filename, anl::CArray2Drgba *array);
};

namespace anl
{


class CVec2f
{
	public:
	CVec2f();
    ~CVec2f();
    CVec2f(int a);
    CVec2f(float a);
    CVec2f(const CVec2f &tvec);
    CVec2f(const float t1, const float t2);

	const float dotprod(const CVec2f &tvec);
    const float length();
    void normalize();
    void set(float v1, float v2);

    tolua_property float x;
    tolua_property float y;
};

class CVec3f
{
    public:
    CVec3f();
    ~CVec3f();
    CVec3f(int a);
    CVec3f(float a);
    CVec3f(const CVec3f &tvec);
    CVec3f(const float t1, const float t2, const float t3);


    const float dotprod(const CVec3f &tvec);
    const float length();
    void normalize();
    void set(float v1, float v2, float v3);

    tolua_property float x;
    tolua_property float y;
    tolua_property float z;
};

class CVec2i
{
	CVec2i();
	CVec2i(int a);
	CVec2i(const CVec2i &tvec);
	CVec2i(const int t1, const int t2);
	~CVec2i();

	tolua_property int x;
	tolua_property int y;
};

class CVec3i
{
	CVec3i();
	CVec3i(int a);
	CVec3i(const CVec3i &tvec);
	CVec3i(const int t1, const int t2, const int t3);
	~CVec3i();

	tolua_property int x;
	tolua_property int y;
	tolua_property int z;
};

class CVec4i
{
	CVec4i();
	CVec4i(int a);
	CVec4i(const CVec4i &tvec);
	CVec4i(const int t1, const int t2, const int t3, const int t4);
	~CVec4i();

	tolua_property int x;
	tolua_property int y;
	tolua_property int z;
	tolua_property int w;

};

class SRGBA
{
	 SRGBA();
	 SRGBA(int a);
	 SRGBA(const  SRGBA &tvec);
	 SRGBA(const float t1, const float t2, const float t3, const float t4);
	 ~SRGBA();

	tolua_property float x;
	tolua_property float y;
	tolua_property float z;
	tolua_property float w;

};

class CArray2Dd
{
  CArray2Dd(int w, int h);
  CArray2Dd();
  ~CArray2Dd();
  void resize(int w, int h);
  void destroy();
  int width();
  int height();
  void set(int x, int y, double v);
  double get(int x, int y);
  double get(float x, float y);
  double getIndexed(unsigned c);
  void fill(float v);
  void copyFrom(CArray2Dd *b);
  void addArray(CArray2Dd *b);
  void subtractArray(CArray2Dd *b);
  void multiplyArray(CArray2Dd *b);
  void copyFromSub(CArray2Dd *b, int x, int y);
  void addArraySub(CArray2Dd *b, int x, int y);
  void subtractArraySub(CArray2Dd *b, int x, int y);
  void multiplyArraySub(CArray2Dd *b, int x, int y);
  void scale(float s);
  double getMax();
  double getMin();
  void scaleToRange(float low, float high);
  void wrapCoords(int &x, int &y);
  void offset(int ox, int oy);
  void flipVertical();
  void flipHorizontal();
  void blur(float,bool);
};

class CArray2Drgba
{
  CArray2Drgba(int w, int h);
  CArray2Drgba();
  ~CArray2Drgba();
  void resize(int w, int h);
  void destroy();
  int width();
  int height();
  void set(int x, int y, SRGBA v);
  SRGBA get(int x, int y);
  SRGBA get(float x, float y);
  SRGBA getIndexed(unsigned c);
  void fill(SRGBA v);
  void copyFrom(CArray2Drgba *b);
  void addArray(CArray2Drgba *b);
  void subtractArray(CArray2Drgba *b);
  void multiplyArray(CArray2Drgba *b);
  void copyFromSub(CArray2Drgba *b, int x, int y);
  void addArraySub(CArray2Drgba *b, int x, int y);
  void subtractArraySub(CArray2Drgba *b, int x, int y);
  void multiplyArraySub(CArray2Drgba *b, int x, int y);
  void scale(SRGBA s);
  void wrapCoords(int &x, int &y);
  void offset(int ox, int oy);
  void flipVertical();
  void flipHorizontal();
  void blur(float,bool);
};


class CArray3Dd
{
	public:
	CArray3Dd();
	CArray3Dd(int w, int h, int d);
	~CArray3Dd();

	int width();
	int height();
	int depth();

	void set(int x, int y, int z, double v);
	double get(int x, int y, int z);
	void resize(int w, int h, int d);
};

class CArray3Drgba
{
	public:
	CArray3Drgba();
	CArray3Drgba(int w, int h, int d);
	~CArray3Drgba();

	int width();
	int height();
	int depth();

	void resize(int w, int h, int d);
	void set(int x, int y, int z, anl::SRGBA v);
	anl::SRGBA get(int x, int y, int z);
};

};
// Bump-mapping stuff
namespace anl
{
    void calcBumpMap(anl::CArray2Dd *map, anl::CArray2Dd *bump, float light[3], double spacing, bool wrap);
    void calcNormalMap(anl::CArray2Dd *map, anl::CArray2Drgba *normal, double spacing, bool normalize, bool wrap);

    void multRGBAByDouble(anl::CArray2Drgba *rgba, anl::CArray2Dd *map);
};


// Rasterization
namespace anl
{
	void rasterizeImplicitTriangle(int u1, int v1, CVec3f p1, int u2, int v2, CVec3f p2, int u3, int v3, CVec3f p3, anl::CArray2Dd *a, anl::CImplicitModuleBase *f);
	void rasterizeRGBATriangle(int u1, int v1, CVec3f p1, int u2, int v2, CVec3f p2, int u3, int v3, CVec3f p3, anl::CArray2Drgba *a, anl::CRGBAModuleBase *f);
};


// Buffer stuff
namespace anl
{
	class CImplicitBufferBase
    {
    public:
        void get(anl::CArray2Dd &out);
    };

	class CRGBABufferBase
    {

        void get(anl::CArray2Drgba &out);
    };

	class CImplicitBufferBlur : public CImplicitBufferBase
    {
    public:
      CImplicitBufferBlur();
      CImplicitBufferBlur(CImplicitBufferBase *src, double blursize, bool seamless=false);
      ~CImplicitBufferBlur();

      void setSource(CImplicitBufferBase *src);
      void setBlurSize(double blursize);
      void setSeamless(bool seamless);
	};

	class CImplicitBufferBumpMap : public CImplicitBufferBase
    {
    public:
        CImplicitBufferBumpMap();
        CImplicitBufferBumpMap(CImplicitBufferBase * src, float lx, float ly, float lz, double spacing, bool seamless);
        ~CImplicitBufferBumpMap();

        void setSource(CImplicitBufferBase * src);
        void setLightVector(float vx, float vy, float vz);
        void setSpacing(double spacing);
        void setSeamless(bool seamless);
	};
	
	class CImplicitBufferConstant : public CImplicitBufferBase
	{
		CImplicitBufferConstant();
		CImplicitBufferConstant(double c);
		~CImplicitBufferConstant();
		
		void setConstant(double c);
	};

	class CImplicitBufferImplicitAdapter : public CImplicitBufferBase
    {
    public:
        CImplicitBufferImplicitAdapter();
        CImplicitBufferImplicitAdapter(anl::CImplicitModuleBase * src, int mapping=anl::SEAMLESS_NONE, SMappingRanges ranges=SMappingRanges(), bool use_z=false, double zvalue=0.0);
        ~CImplicitBufferImplicitAdapter();

        void setSource(anl::CImplicitModuleBase * src);
        void setMapping(int mapping);
        void setRanges(SMappingRanges &ranges);
        void setUseZ(bool use_z);
        void setZ(double z);
	};

	class CImplicitBufferScaleToRange : public CImplicitBufferBase
    {
    public:
        CImplicitBufferScaleToRange();
        CImplicitBufferScaleToRange(CImplicitBufferBase * src, double low, double high);
        ~CImplicitBufferScaleToRange();

        void setRange(double low, double high);
        void setSource(CImplicitBufferBase * src);
	};

	class CImplicitBufferSimpleErode : public CImplicitBufferBase
    {
    public:
        CImplicitBufferSimpleErode();
        CImplicitBufferSimpleErode(CImplicitBufferBase * src, int numdrops, float power, unsigned int iterations=1);
        ~CImplicitBufferSimpleErode();

        void setSource(CImplicitBufferBase * src);
        void setNumDrops(int drops);
        void setPower(float power);
		void setIterations(unsigned int);
	};
	
	class CImplicitBufferSimpleRainfall : public CImplicitBufferBase
    {
    public:
        CImplicitBufferSimpleRainfall();
        CImplicitBufferSimpleRainfall(CImplicitBufferBase * src);
        ~CImplicitBufferSimpleRainfall();

        void setSource(CImplicitBufferBase * src);
	};

	class CImplicitBufferUnaryMath : public CImplicitBufferBase
    {
    public:
        CImplicitBufferUnaryMath();
        CImplicitBufferUnaryMath(CImplicitBufferBase * source, int op);
        ~CImplicitBufferUnaryMath();

        void setSource(CImplicitBufferBase * source);
        void setOp(int op);
	};

	class CImplicitBufferSelect : public CImplicitBufferBase
	{
		public:
		CImplicitBufferSelect();
		CImplicitBufferSelect(CImplicitBufferBase *low, CImplicitBufferBase *high, CImplicitBufferBase *ctrl, double thresh, double fall);
		~CImplicitBufferSelect();

		void setControl(CImplicitBufferBase *c);
		void setLow(CImplicitBufferBase *l);
		void setHigh(CImplicitBufferBase *h);
		void setThreshold(double t);
		void setFalloff(double f);
	};



	class CRGBABufferBlur : public CRGBABufferBase
    {
    public:
        CRGBABufferBlur();
        CRGBABufferBlur(CRGBABufferBase * src, double blursize, bool seamless);
        ~CRGBABufferBlur();

        void setSource(CRGBABufferBase * src);
        void setBlurSize(double blursize);
        void setSeamless(bool seamless);
	};

	class CRGBABufferImplicitBufferAdapter : public CRGBABufferBase
    {
    public:
        CRGBABufferImplicitBufferAdapter();
        CRGBABufferImplicitBufferAdapter(CImplicitBufferBase * src);
        ~CRGBABufferImplicitBufferAdapter();

        void setSource(CImplicitBufferBase * src);
	};

	class CRGBABufferImplicitBufferMultiply : public CRGBABufferBase
    {
    public:
        CRGBABufferImplicitBufferMultiply();
        CRGBABufferImplicitBufferMultiply(CRGBABufferBase * rgbasrc, CImplicitBufferBase * impsrc);
        ~CRGBABufferImplicitBufferMultiply();

        void setRGBASource(CRGBABufferBase * src);
        void setImplicitSource(CImplicitBufferBase * src);
	};

	class CRGBABufferRGBAAdapter : public CRGBABufferBase
    {
    public:
        CRGBABufferRGBAAdapter();
        CRGBABufferRGBAAdapter(anl::CRGBAModuleBase * src, int mapping=anl::SEAMLESS_NONE, SMappingRanges ranges=SMappingRanges(), bool use_z=false, double zvalue=0.0);
        ~CRGBABufferRGBAAdapter();

        void setSource(anl::CRGBAModuleBase * src);
        void setMapping(int mapping);
        void setRanges(SMappingRanges &ranges);
        void setUseZ(bool use_z);
        void setZ(double z);
	};

	class CRGBABufferSelect : public CRGBABufferBase
	{
		CRGBABufferSelect();
		CRGBABufferSelect(CRGBABufferBase *low, CRGBABufferBase *high, CImplicitBufferBase *ctrl, double thresh, double fall);
		~CRGBABufferSelect();

		void setControl(CImplicitBufferBase *c);
		void setLow(CRGBABufferBase *l);
		void setHigh(CRGBABufferBase *h);
		void setThreshold(double t);
		void setFalloff(double f);
	};

};
